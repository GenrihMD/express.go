{"version":3,"names":[],"mappings":"","sources":["runtimePaths.js"],"sourcesContent":["\"use strict\";\nlet _ = require(\"lodash\");\nlet assert = require(\"assert\");\nlet semver = require(\"semver\");\n\nlet runtimePaths = {\n    node: function (targetOptions) {\n        if (semver.lt(targetOptions.runtimeVersion, \"4.0.0\")) {\n            return {\n                externalPath: \"http://nodejs.org/dist/v\" + targetOptions.runtimeVersion + \"/\",\n                winLibDir: targetOptions.isX64 ? \"x64\" : \"\",\n                winLibName: targetOptions.runtime + \".lib\",\n                tarPath: targetOptions.runtime + \"-v\" + targetOptions.runtimeVersion + \".tar.gz\",\n                headerOnly: false\n            };\n        }\n        else {\n            return {\n                externalPath: \"http://nodejs.org/dist/v\" + targetOptions.runtimeVersion + \"/\",\n                winLibDir: targetOptions.isX64 ? \"win-x64\" : \"win-x86\",\n                winLibName: targetOptions.runtime + \".lib\",\n                tarPath: targetOptions.runtime + \"-v\" + targetOptions.runtimeVersion + \"-headers.tar.gz\",\n                headerOnly: true\n            };\n        }\n    },\n    iojs: function (targetOptions) {\n        return {\n            externalPath: \"https://iojs.org/dist/v\" + targetOptions.runtimeVersion + \"/\",\n            winLibDir: targetOptions.isX64 ? \"win-x64\" : \"win-x86\",\n            winLibName: targetOptions.runtime + \".lib\",\n            tarPath: targetOptions.runtime + \"-v\" + targetOptions.runtimeVersion + \".tar.gz\",\n            headerOnly: false\n        };\n    },\n    nw: function (targetOptions) {\n        return {\n            externalPath: \"http://node-webkit.s3.amazonaws.com/v\" + targetOptions.runtimeVersion + \"/\",\n            winLibDir: targetOptions.isX64 ? \"x64\" : \"\",\n            winLibName: targetOptions.runtime + \".lib\",\n            tarPath: \"nw-headers-v\" + targetOptions.runtimeVersion + \".tar.gz\",\n            headerOnly: false\n        };\n    },\n    electron: function (targetOptions) {\n        return {\n            externalPath: \"http://atom.io/download/atom-shell/v\" + targetOptions.runtimeVersion + \"/\",\n            winLibDir: targetOptions.isX64 ? \"x64\" : \"\",\n            winLibName: \"node.lib\",\n            tarPath: \"node\" + \"-v\" + targetOptions.runtimeVersion + \".tar.gz\",\n            headerOnly: false\n        };\n    },\n    get: function (targetOptions) {\n        assert(_.isObject(targetOptions));\n\n        let runtime = targetOptions.runtime;\n        let func = runtimePaths[runtime];\n        let paths;\n        if (_.isFunction(func) && _.isPlainObject(paths = func(targetOptions))) {\n            return paths;\n        }\n        throw new Error(\"Unknown runtime: \" + runtime);\n    }\n};\n\nmodule.exports = runtimePaths;"],"file":"runtimePaths.js","sourceRoot":"/source/"}